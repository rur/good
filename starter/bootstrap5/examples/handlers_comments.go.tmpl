package [# .Name #]

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"[# .Namespace #]/site"
	"github.com/rur/treetop"
)

// Ref: comments
// Block: subsection
func commentsHandler(env *site.Env, rsp treetop.Response, req *http.Request) interface{} {
	data := struct {
		SubsectionTabs interface{}
		Comments       []Comment
	}{
		SubsectionTabs: rsp.HandleSubView("subsection-tabs", req),
		Comments:       mockComments, // see mockdata.go
	}
	return data
}

// Ref: comments-likes
// Method: POST
// Doc: increment like if a valid comment is found, ignore otherwise
// Block: likes
func commentsLikesHandler(env *site.Env, rsp treetop.Response, req *http.Request) interface{} {
	commentIndex, err := strconv.Atoi(req.URL.Query().Get("comment"))
	if err != nil || commentIndex < 0 && commentIndex >= len(mockComments) {
		env.ErrorLog.Printf("Invlaid comment index %s", req.URL.Query().Get("comment"))
		http.Redirect(rsp, req, "/[# .Name #]/error", http.StatusFound)
		return nil
	}
	mockComments[commentIndex].Likes += 1
	return mockComments[commentIndex]
}

// Ref: reply-modal
// Block: modal
// Doc: GET/POST endpoint to add a reply to a comment
func replyModalHandler(env *site.Env, rsp treetop.Response, req *http.Request) interface{} {
	data := struct {
		Comment      Comment
		CommentIndex int
		NameValue    string
		MessageValue string
		Error        string
	}{
		CommentIndex: -1,
	}
	if commentIndex, err := strconv.Atoi(req.URL.Query().Get("comment")); err != nil || commentIndex < 0 || commentIndex >= len(mockComments) {
		rsp.Status(http.StatusNotFound)
		data.Error = fmt.Sprintf("Unknown comment ID %s", req.URL.Query().Get("comment"))
	} else {
		data.CommentIndex = commentIndex
		data.Comment = mockComments[commentIndex]
	}

	switch req.Method {
	case "GET", "HEAD":
		return data
	case "POST":
		// passthrough
	default:
		http.Error(rsp, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return nil
	}

	// this it is a POST request, parse the reply and redirect to the /[# .Name #]/comments page
	if err := req.ParseForm(); err != nil {
		http.Error(rsp, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return nil
	}

	data.NameValue = strings.TrimSpace(req.Form.Get("name"))
	data.MessageValue = strings.TrimSpace(req.Form.Get("message"))
	if data.NameValue == "" || data.MessageValue == "" {
		// invalid input
		rsp.Status(http.StatusBadRequest)
		data.Error = `Name and message are inputs are required`
	}

	if data.Error != "" {
		return data
	}
	mockComments[data.CommentIndex].Replies = append(
		mockComments[data.CommentIndex].Replies,
		fmt.Sprintf(`%s: %s`, data.NameValue, data.MessageValue),
	)
	// reply was added, force the browser to do a full-page redirect to the comments page
	treetop.Redirect(rsp, req, "/[# .Name #]/comments", http.StatusFound)
	return nil // request headers are already sent, no rendering will occur
}
