package [# .Name #]

import (
	"fmt"
	"net/http"
	"net/url"
	"strconv"
	"strings"
	"time"

	"[# .Namespace #]/service"
	"github.com/rur/treetop"
)

// Ref: logview
// Block: subsection
func logviewHandler(rsc *resources, env *service.Env, rsp treetop.Response, req *http.Request) interface{} {
	return struct {
		SubsectionTabs interface{}
		LogStream      interface{}
		WatchToken     string
	}{
		SubsectionTabs: rsp.HandleSubView("subsection-tabs", req),
		LogStream:      rsp.HandleSubView("log-stream", req),
		WatchToken:     fmt.Sprintf("token-%d", rsp.ResponseID()),
	}
}

// Ref: long-poll-ticker
// Block: log-stream
// Method: GET
// Doc: endpoint implementing a mock event stream using long polling
func longPollTickerHandler(rsc *resources, env *service.Env, rsp treetop.Response, req *http.Request) interface{} {
	query := req.URL.Query()
	data := struct {
		WatchToken string
		Timestamp  time.Time
		PollingURL string
		Log        string
	}{

		WatchToken: query.Get("token"),
		Timestamp:  time.Now(),
	}

	delay, err := strconv.Atoi(query.Get("delay"))
	if err != nil || delay < 1 || delay > 20 {
		delay = 5
	}

	entries := []string{fmt.Sprintf("Polling token: %#v", data.WatchToken)}
	if last, err := strconv.ParseInt(query.Get("last"), 10, 64); err == nil {
		// NOTE: backfill is not implemented
		prev := time.Unix(last, 0)
		entries = append(
			entries,
			fmt.Sprintf("Previous timestamp: %s", prev.String()),
		)
	}

	// see https://pkg.go.dev/time@go1.17#NewTicker
	ticker := time.NewTicker(time.Second)
	defer ticker.Stop()
	done := make(chan bool)
	go func() {
		time.Sleep(time.Duration(delay) * time.Second)
		done <- true
	}()
TICKING:
	for {
		select {
		case <-done:
			entries = append(entries, "Done!")
			break TICKING
		case t := <-ticker.C:
			entries = append(entries, fmt.Sprintf("Current time: %s", t.String()))
			data.Timestamp = t
		}
	}

	polling := url.Values{
		"token": []string{data.WatchToken},
		"last":  []string{strconv.FormatInt(data.Timestamp.Unix(), 10)},
	}
	data.PollingURL = fmt.Sprintf("/[# .Name #]/logs/poll?" + polling.Encode())
	data.Log = strings.Join(entries, "\n")
	return data
}
