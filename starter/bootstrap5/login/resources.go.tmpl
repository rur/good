package [# .Name #]

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"github.com/rur/treetop"
	"[# .Name #]/page"
	"[# .Name #]/site"
)

const (
	// EDITME: choose your own cookie names
	SessionCookieName        = "LOGIN_DEMO_SESSION"
	SessionRefreshCookieName = "LOGIN_DEMO_REFRESH_SESSION"
)

var (
	errLoginUserNotFound   = errors.New("[login] User not found")
	errLoginBadPassword    = errors.New("[login] Bad password")
	errRegisterEmailExists = errors.New("[register] Email exists")
)

// resources that are request-scoped data bound to page handlers
type resources struct {
	// EDITME: add request specific resources for this page

	db loginDB // use login storage manager

	user *site.User
}
type handlerWithResources func(*resources, *site.Env, treetop.Response, *http.Request) interface{}

// loginDB interface for handlers to manage user login state
type loginDB interface {
	authenticateUser(email, password string) (*site.User, error)
	registerUser(name, email, password string) error
	createUserSession(user *site.User, rememberMe bool) (session string, remember string, err error)
	deleteUserSession(session, remember string)
	getUserSession(token string) *site.User
	rememberUserSession(rememberMeToken string) *site.User
}

// loadResources constructs a resources struct for use by the request handlers of this page
//
// If an error or failure occurs, this function is responsible for responding to the client using the ResponseWriter.
func loadResources(rspID uint32, env *site.Env, w http.ResponseWriter, req *http.Request) (rsc *resources, ok bool) {
	rsc = &resources{
		// EDITME: setup your own DB backed login instance
		db: &demoDBSingleton,
	}
	// attempt to fetch user from the session cookie
	if cookie, err := req.Cookie(SessionCookieName); err == nil {
		// will be nil if the session is invalid for any reason
		rsc.user = rsc.db.getUserSession(cookie.Value)
	}

	ok = true
	return
}

// teardownResources happens after the response has been written for the request,
// this hook exists in case any special teardown is needed for your resources instance
func teardownResources(rspID uint32, rsc *resources, env *site.Env) {
	// EDITME: Add teardown logic for your resources
}

type localCxtKey string

const pageRscCxtKey = localCxtKey("resource_key")

// bindResources will memoize page resources in the request context
func bindResources(f handlerWithResources) page.ViewHandlerWithEnv {
	return func(env *site.Env, rsp treetop.Response, req *http.Request) interface{} {
		var rsc *resources
		if rsc, ok := req.Context().Value(pageRscCxtKey).(*resources); ok {
			return f(rsc, env, rsp, req)
		}
		// expensive path
		rsc, ok := loadResources(rsp.ResponseID(), env, rsp, req)
		if !ok {
			// an error ocurred, abort
			return nil
		}
		cxt, cancel := context.WithCancel(context.WithValue(req.Context(), pageRscCxtKey, rsc))
		defer teardownResources(rsp.ResponseID(), rsc, env)
		defer cancel()
		return f(rsc, env, rsp, req.WithContext(cxt))
	}
}
