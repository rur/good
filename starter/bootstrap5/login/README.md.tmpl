# Bootstrap v5 Login

Starter template for user login and registration UX. The demo uses an in-memory mock DB.

### Generated for page `[# .Name #]`

This page is based on the _Sign In_ template from the [Bootstrap v5 Examples](https://getbootstrap.com/docs/5.0/examples/) site.

### Running the server

Since cookies are involved, this demo will not work locally without the `--dev` flag. Otherwise all
cookies will be flagged as secure.

#### Install Dependencies

To support user registration, we introduce two dependencies listed below, you may need to run `go tidy ./...`
to update your go.mod file.

- `golang.org/x/crypto/bcrypt` for password hashing
- `github.com/wagslane/go-password-validator` for password entropy check


## Demo User

Since all mock registrations will be reset between restarts, the mock login DB has one pre-populated user.
You can use these credentials to try out the GUI.

| email             | password         |
|-------------------|------------------|
|`demo@example.com` | `password123`    |


## Customization

This starter page aims to be a fairly feature-complete GUI for user registration and login. Your requirements
might be simpler or very different in some way. This section should help you to figure out what code to keep,
what to modify and what to get rid of.

### Mock Database

The __mock_logindb.go__ file has an in-memory implementation of the `loginDB` interface defined in the
__resources.go__ file. You can get started fairly quickly by hooking up some kind of DB to a copy of that code.

#### Database Procedures

These are the procedures satisfying the `loginDB` interface.

| Procedure              | Description
|------------------------|-----------------------------------------
| authenticateUser       | Load a user instance based on email + password
| registerUser           | Save a new user. Email must not conflict with an existing user
| createUserSession      | Given a user instance, store it and get back a pair of session keys (`session_key` & `refresh_key`)
| deleteUserSession      | Purge any user session records associated with a pair of keys
| getUserSession         | Redeem user info given a session key
| rememberUserSession    | Redeem user info given a session refresh key (remember me)


### Restricting Registrations

You may wish to prevent users from registering themselves with your server.

In that case I would suggest removing the sign-up endpoints from the
__routemap.toml__, along with the __handler_registration.go__ file.
Also delete any `sign-up-*.html.tmpl` templates from the _templates_ directory.

Finally, remove links from the other template files and run Go Generate
to apply your changes. Resolve any compiler errors.

```
go generate [# .Namespace #]/...
```

Pay close attention to any error message you see during
start up. Templates are parsed and validated up front.


### Page Files:

- **resources.go** setup DB for the handlers and attempt to load the user session for the current request
- **handlers.go** Base handler for the base HTML template
- **handlers_registration.go** load registration form and handle `POST .../create`
- **handlers_signin.go** login form endpoint, handle `GET` and `POST`
- **handlers_signout.go** user logout handler
- **handlers_whoami.go** display current-user session status
- **mock_logindb.go** in-memory mock DB implementation for demonstration

Refer to the [Page Routemap Docs](../../docs/ROUTEMAP.md) for guidelines on understanding the
page endpoint configuration.
