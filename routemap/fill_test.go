package routemap

import (
	"bytes"
	"reflect"
	"strings"
	"testing"

	"github.com/pelletier/go-toml"
	"github.com/rur/good/generate"
)

func TestFillMissingTemplatesAndHandlersBasic(t *testing.T) {
	tree, err := toml.Load(`
_ref = "testsite"
_doc = "this is a test"
	`)
	if err != nil {
		t.Error(err)
		return
	}
	gotTmpl, gotHlr, err := FillMissingTemplatesAndHandlers(tree, "page/testsite/templates")
	if err != nil {
		t.Error(err)
		return
	}
	expectTmpl := []generate.HTMLTemplate{
		{
			Path: "page/testsite/templates/testsite.html.tmpl",
		},
	}
	if !reflect.DeepEqual(expectTmpl, gotTmpl) {
		t.Errorf("FillMissingTemplatesAndHandlers(): expecting templates %v\ngot: %v", expectTmpl, gotTmpl)
	}
	expectHlr := []generate.Handler{
		{
			Ref:        "testsite",
			Identifier: "testsiteHandler",
		},
	}
	if !reflect.DeepEqual(expectHlr, gotHlr) {
		t.Errorf("FillMissingTemplatesAndHandlers(): expecting handlers %v\ngot: %v", expectHlr, gotHlr)
	}
	var content bytes.Buffer
	if _, err := tree.WriteTo(&content); err != nil {
		t.Errorf("Error writing from modified tree: %s", err)
	}
	expecting := []string{
		`_doc = "this is a test"`,
		`# generated by good routes`,
		`_handler = "testsiteHandler"`,
		`_ref = "testsite"`,
		`# generated by good routes`,
		`_template = "page/testsite/templates/testsite.html.tmpl"`,
	}
	for _, expect := range expecting {
		if !strings.Contains(content.String(), expect) {
			t.Errorf("FillMissingTemplatesAndHandlers() expecting output to contain '%s'\n got %s", expecting, &content)
		}
	}
}

func TestFillMissingTemplatesAndHandlersNested(t *testing.T) {
	tree, err := toml.Load(`
_ref = "testsite"
_doc = "this is a test"

[[test-block]]
_ref = "sub-test-site"
_doc = "this is a child"
_path = "/some-path"
_method = "POST"
	`)
	if err != nil {
		t.Error(err)
		return
	}
	gotTmpl, gotHlr, err := FillMissingTemplatesAndHandlers(tree, "page/testsite/templates")
	if err != nil {
		t.Error(err)
		return
	}
	expectTmpl := []generate.HTMLTemplate{
		{
			Path: "page/testsite/templates/testsite.html.tmpl",
			Blocks: []generate.HandleBlock{
				{FieldName: "TestBlock", Name: "test-block"},
			},
		},
		{
			Path: "page/testsite/templates/test-block/sub-test-site.html.tmpl",
		},
	}
	if !reflect.DeepEqual(expectTmpl, gotTmpl) {
		t.Errorf("FillMissingTemplatesAndHandlers(): expecting templates %v\ngot: %v", expectTmpl, gotTmpl)
	}
	expectHlr := []generate.Handler{
		{
			Ref:        "testsite",
			Identifier: "testsiteHandler",
			Blocks: []generate.HandleBlock{
				{FieldName: "TestBlock", Name: "test-block"},
			},
		},
		{
			Ref:        "sub-test-site",
			Block:      "[[test-block]]",
			Method:     "POST",
			Identifier: "subTestSiteHandler",
		},
	}
	if !reflect.DeepEqual(expectHlr, gotHlr) {
		t.Errorf("FillMissingTemplatesAndHandlers(): expecting handlers %v\ngot: %v", expectHlr, gotHlr)
	}
	var content bytes.Buffer
	if _, err := tree.WriteTo(&content); err != nil {
		t.Errorf("Error writing from modified tree: %s", err)
	}
	expecting := []string{
		`_handler = "testsiteHandler"`,
		`_template = "page/testsite/templates/testsite.html.tmpl"`,
		`_handler = "subTestSiteHandler"`,
		`_method = "POST"`,
		`_path = "/some-path"`,
		`_ref = "sub-test-site"`,
		`_template = "page/testsite/templates/test-block/sub-test-site.html.tmpl`,
	}
	for _, expect := range expecting {
		if !strings.Contains(content.String(), expect) {
			t.Errorf("FillMissingTemplatesAndHandlers() expecting output to contain '%s'\n got %s", expecting, &content)
		}
	}
}
