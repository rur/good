package [# .Name #]

import (
	"context"
	"net/http"

	"[# .Namespace #]/page"
	"[# .Namespace #]/site"
	"github.com/rur/treetop"
)

// resources that are request-scoped data bound to page handlers
type resources struct {
	user site.User
	// EDITME: add request specific resources for this page
}
type handlerWithResources func(*resources, *site.Env, treetop.Response, *http.Request) interface{}

// loadResources constructs a resources struct for use by the request handlers of this page
//
// If an error or failure occurs, this function is responsible for responding to the client using the ResponseWriter.
func loadResources(rspID uint32, env *site.Env, w http.ResponseWriter, req *http.Request) (rsc *resources, ok bool) {
	// EDITME: setup your handler resources here
	ok = true
	rsc = &resources{
		user: site.User{
			Name:  "!unauthenticated!",
			Email: "unauthenticated@example.com",
		},
	}
	return
}

// teardownResources happens after the root handler returns
// this hook exists in case any special teardown is needed for your resources instance
func teardownResources(rspID uint32, rsc *resources, env *site.Env) {
	// EDITME: Add teardown logic for your resources
}

type localCxtKey string

const pageRscCxtKey = localCxtKey("resource_key")

// bindResources uses the request context to cache request scoped resources
func bindResources(f handlerWithResources) page.ViewHandlerWithEnv {
	return func(env *site.Env, rsp treetop.Response, req *http.Request) interface{} {
		var rsc *resources
		if rsc, ok := req.Context().Value(pageRscCxtKey).(*resources); ok {
			return f(rsc, env, rsp, req)
		}
		// expensive path
		rsc, ok := loadResources(rsp.ResponseID(), env, rsp, req)
		if !ok {
			// an error ocurred, abort
			return nil
		}
		cxt, cancel := context.WithCancel(context.WithValue(req.Context(), pageRscCxtKey, rsc))
		defer teardownResources(rsp.ResponseID(), rsc, env)
		defer cancel()
		return f(rsc, env, rsp, req.WithContext(cxt))
	}
}
